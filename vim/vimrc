"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: Casper
" Version: 3.1 - 20210603
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins managed by Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Don't be vi compatible
set nocompatible              " be iMproved, required by Vundle
filetype off                  " required, required by Vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'preservim/nerdtree'                 " Filesystem explorer
Plugin 'preservim/tagbar'                   " Sidebar with ctags
Plugin 'vim-airline/vim-airline'            " Lean & mean status/tabline
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-syntastic/syntastic'            " Syntax highlighter
Plugin 'junegunn/rainbow_parentheses.vim'   " Guess :-)
Plugin 'ctrlpvim/ctrlp.vim'                 " Jump to tag

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required by Vundle

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" Autosave on losing focus
" au FocusLost * :wa

" Prevents some security exploits
set modelines=0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Always show current position
set ruler

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Show matching brackets when text indicator is over them
set showmatch

" Configure backspace so it acts as it should act
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Don't redraw while executing macros (good performance config)
set lazyredraw

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set hidden
set wildmenu
set wildmode=list:longest

set scrolloff=3
set showmode
set showcmd
set ttyfast
set laststatus=2
set number

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors and fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"set background=dark
"colorscheme solarized
"colorscheme desert
"colorscheme seoul256

"hi! link Conceal Normal
"hi! Normal ctermbg=NONE
"hi! NonText ctermbg=NONE

" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf-8

" Use UNIX as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files, backups and sudo 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" When you forget to open file with sudo rights, save it anyway
"cmap w!! w !sudo tee % >/dev/null

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" Smart indent for C code
set cindent

" Indentation
set tabstop=2
set shiftwidth=2
set softtabstop=2

" Specific indentation for certain filetypes
autocmd FileType c setlocal tabstop=8 shiftwidth=8 softtabstop=8
autocmd FileType cpp setlocal tabstop=4 shiftwidth=4 softtabstop=4

set autoindent
set smartindent 

" Handle lines
set nolist  " list disables linebreak
set formatoptions=qrn1

" Visually show max text width
set colorcolumn=80
highlight colorcolumn ctermbg=DarkGray guibg=DarkGray

" Delete trailing white space on save
"func! DeleteTrailingWS()
"  exe "normal mz"
"  %s/\s\+$//ge
"  exe "normal `z"
"endfunc

"autocmd BufWrite *.c :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editting mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Change leader from \ to ,
let mapleader = ","

" Remove highligt when done searching by \ space
nnoremap <leader><space> :noh<cr> 

" Turn arrow-keys off, learn hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" gj/gk moves visually one line, even if it's the same line
nnoremap j gj
nnoremap k gk

" Remap split movement to Ctrl-hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Split more naturally
set splitbelow
set splitright

" Return to the last edit position when opening files
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
au BufWinEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
au BufWinLeave * call clearmatches()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" -----------Buffer Management---------------
set hidden " Allow buffers to be hidden if you've modified a buffer

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>q :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Don't show the mode
set noshowmode

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Macros 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Leader key shortcut: Open new window in vertical split and change to it
nnoremap <leader>w <C-w>v<C-w>l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

function! HybridLN()
    set relativenumber
    set number
endfunction

function! AbsoluteLN()
    set relativenumber!
    set number
endfunction

" Absolute line number when focus is lost
autocmd FocusLost * :call AbsoluteLN()
autocmd FocusGained * :call HybridLN()

" Absolute in normal mode / relative in insert mode
autocmd InsertEnter * :call AbsoluteLN()
autocmd InsertLeave * :call HybridLN()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Airline Setup
let g:airline#extensions#tabline#enabled = 1 " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " Show just the filename

" Syntastic Setup
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = '☢'

"let g:syntastic_c_checkers = ['clang_check', 'clang_tidy', 'cppcheck', 'gcc', 'make']
let g:syntastic_c_checkers = ['gcc', 'make']
let g:syntastic_c_compiler_options ='-Wpedantic -Wall -Wextra -g'

" RainbowParantheses
au VimEnter * RainbowParentheses

" ctrl-p
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" Use the nearest .git|.svn|.hg|.bzr directory as the cwd
let g:ctrlp_working_path_mode = 'r'
nmap <leader>p :CtrlP<cr>  " enter file search mode

" TagBar Setup
nnoremap <leader>t :TagbarToggle<cr>

" Taglist
let Tlist_Use_Right_Window = 1

" Look for tag def in a "tags" file in the dir of the current file, then for
" that same file in every folder above the folder of the current file, until the
" root.
set tags=./tags;/

" Nerdtree
autocmd vimenter * NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <C-n> :NERDTreeToggle<CR>  " open and close file tree
nmap <leader>n :NERDTreeFind<CR>  " open current buffer in file tree

" CScope plugin
source $HOME/.vim/plugin/cscope_maps.vim

" F3 functions calling this function
nmap <F3> :cs find c <C-R>=expand("<cword>")<CR><CR>	
" F4 functions called by this function
nmap <F4> :cs find d <C-R>=expand("<cword>")<CR><CR>	
