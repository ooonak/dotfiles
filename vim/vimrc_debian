"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: Casper
" Version: 2.1 - 29/05 2016
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins managed by Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Don't be vi compatible
set nocompatible              " be iMproved, required by Vundle
filetype off                  " required, required by Vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdTree'

Plugin 'nathanaelkane/vim-indent-guides'    " Show indentation
Plugin 'ntpeters/vim-better-whitespace'     " See trailing whitespace
Plugin 'whatyouhide/vim-lengthmatters'      " See long lines

Plugin 'scrooloose/syntastic'               " Syntax highlighter
Plugin 'vim-jp/cpp-vim'                     " C and C++ highlighting
Plugin 'octol/vim-cpp-enhanced-highlight'   " Better C++ highlighting

Plugin 'rhysd/vim-clang-format'             " Clang code formatter

"Bundle 'Valloric/YouCompleteMe'
"Plugin 'Valloric/ListToggle'

Plugin 'SirVer/ultisnips'                   " The engine
Plugin 'honza/vim-snippets'                 " Snippets

Plugin 'sjl/gundo.vim'                      " Graphical undo

Plugin 'luochen1990/rainbow'
Plugin 'Solarized'
Plugin 'junegunn/seoul256.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required by Vundle

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Sets how many lines of history VIM has to remember
set history=100

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" Autosave on losing focus
au FocusLost * :wa

" Prevents some security exploits
set modelines=0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Always show current position
set ruler

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Show matching brackets when text indicator is over them
set showmatch

" Configure backspace so it acts as it should act
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Don't redraw while executing macros (good performance config)
set lazyredraw

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set hidden
set wildmenu
set wildmode=list:longest

" Show some non-printable
"set list
"set listchars=tab:▸\ ,eol:¬

set scrolloff=3
set showmode
set showcmd
set ttyfast
set laststatus=2
set number

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors and fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"set background=dark
"colorscheme solarized
"colorscheme desert
colorscheme seoul256

hi! link Conceal Normal
hi! Normal ctermbg=NONE
hi! NonText ctermbg=NONE

" Set extra options when running in GUI mode
if has("gui_running")
  set guioptions-=m " Remove menu bar
  set guioptions-=T " Remove toolbar
  set guioptions-=r " Remove right-hand scroll bar
  set guioptions-=L " Remove left-hand scroll bar
  set guioptions+=e " 
  set t_Co=256
  set guitablabel=%M\ %t

  " Set initial size of gvim
  set lines=54
  set columns=89
endif

" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf-8

" Use UNIX as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files, backups and sudo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set noswapfile

" Path to undo, backup and swap files
set undodir=~/.vim/tmp/undo//
"set backupdir=~/.vim/tmp/backup//
"set directory=~/.vim/tmp/swap//

" Use persistent undo
set undofile
set undolevels=100 "maximum number of changes that can be undone
set undoreload=400 "maximum number lines to save for undo on a buffer reload

" When you forget to open file with sudo rights, save it anyway
cmap w!! w !sudo tee % >/dev/null

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" Smart indent for C code
set cindent

" Indentation
set tabstop=2
set shiftwidth=2
set softtabstop=2

" Specific indentation for certain filetypes
autocmd FileType c setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType cpp setlocal tabstop=4 shiftwidth=4 softtabstop=4

set autoindent
set smartindent 

" Handle lines
set nolist  " list disables linebreak
set formatoptions=qrn1

" Just break them visually, without inserting line break
"set linebreak
"set wrap
"set wrapmargin=0
"set textwidth=0

" Don't make lines longer than 79, insert line break
"set formatoptions+=t
"set textwidth=79

" Visually show max text width
"set colorcolumn=80
"highlight colorcolumn ctermbg=DarkGray guibg=DarkGray

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editting mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Change leader from \ to ,
let mapleader = ","

" Remove highligt when done searching by \ space
nnoremap <leader><space> :noh<cr> 

" Turn arrow-keys off, learn hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" gj/gk moves visually one line, even if it's the same line
nnoremap j gj
nnoremap k gk

" Remap split movement to Ctrl-hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Split more naturally
set splitbelow
set splitright

" Return to the last edit position when opening files
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
" Remember info about open buffers on close
" set viminfo^=%

" Delete trailing white space on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

autocmd BufWrite *.c :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Useful mappings for managing tabs
map <leader>h :tabn<cr>
map <leader>l :tabp<cr>
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

  " Useful mappings for managing buffers
  map <C-n> :bnext<CR>
  map <C-p> :bprevious<CR>

  " Opens a new tab with the current buffer's path
  " Super useful when editing files in the same directory
  " even better is :Te!
  map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " Spellchecking
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  "map <F5> <Esc>:setlocal spell spelllang=da<CR>
  "map <F6> <Esc>:setlocal spell spelllang=en_gb<CR>
  "map <F7> <Esc>:setlocal nospell<CR>

  """"""""""""""""""""""""""""""
  " => Status line
  """"""""""""""""""""""""""""""
  " Always show the status line
  set laststatus=2

  " Don't show the mode
  set noshowmode

  " Format the status line
  "set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l/%L\ Col:\ %c

  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " Macros 
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  " Macro: open menu
  map <F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR> 

  " Macro: re-source .vimrc
  "map <F2> :so %<CR>

  " Macro: compile and run
  "map <F10> :w<CR> :!clear; clang % -o %< && ./%<<CR>

  " Macro: paste / no paste
  "set pastetoogle=<F2>

  " Leader key shortcut: Strip off whitespace with <leader> W
  "nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

  " Leader key shortcut: Open new window in vertical split and change to it
  nnoremap <leader>w <C-w>v<C-w>l

" Toggle taglist
"nnoremap <leader>t :TlistToggle<CR>

" Toggle file explorer
"nnoremap <leader>e :Explore<CR>
"nnoremap <leader>et :Texplore<CR>
"nnoremap <leader>ev :VExplore<CR>
"nnoremap <leader>eh :HExplore<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

function! HybridLN()
    set relativenumber
    set number
endfunction

function! AbsoluteLN()
    set relativenumber!
    set number
endfunction

" Absolute line number when focus is lost
autocmd FocusLost * :call AbsoluteLN()
autocmd FocusGained * :call HybridLN()

" Absolute in normal mode / relative in insert mode
autocmd InsertEnter * :call AbsoluteLN()
autocmd InsertLeave * :call HybridLN()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File type settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" C++
au BufNewFile,BufRead *
            \ if expand('%:e') =~ '^\(h\|hh\|hxx\|hpp\|ii\|ixx\|ipp\|inl\|txx\|tpp\|tpl\|cc\|cxx\|cpp\)$' |
            \     if &ft != 'cpp'                                                                         |
            \         set ft=cpp                                                                          |
            \     endif                                                                                   |
            \ endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Airline Setup
let g:airline_theme = 'hybrid'
let g:airline_powerline_fonts = 0

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" Syntastic Setup
" getbg function
" gets background of a highlighting group with fallback to SignColumn group
function! s:getbg(group)
    if has("gui_running")
        let l:mode = 'gui'
        let l:validation = '\w\+\|#\x\+'
    else
        let l:mode = 'cterm'
        let l:validation = '\w\+'
    endif

    if synIDattr(synIDtrans(hlID(a:group)), 'reverse', l:mode)
        let l:bg = synIDattr(synIDtrans(hlID(a:group)), 'fg', l:mode)
    else
        let l:bg = synIDattr(synIDtrans(hlID(a:group)), 'bg', l:mode)
    endif

    if l:bg == '-1' || l:bg !~ l:validation
        if synIDattr(synIDtrans(hlID('SignColumn')), 'reverse', l:mode)
            let l:bg = synIDattr(synIDtrans(hlID('SignColumn')), 'fg', l:mode)
        else
            let l:bg = synIDattr(synIDtrans(hlID('SignColumn')), 'bg', l:mode)
        endif
    endif

    if l:bg == '-1' || l:bg !~ l:validation
        return ''
    endif

    return l:mode . 'bg=' . l:bg
endfunction

let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = '☢'
hi! link SyntasticErrorLine SignColumn
hi! link SyntasticWarningLine SignColumn
au VimEnter,ColorScheme * exec 'hi! SyntasticErrorSign guifg=red ctermfg=red ' . s:getbg('SyntasticErrorLine')
au VimEnter,ColorScheme * exec 'hi! SyntasticWarningSign guifg=yellow ctermfg=yellow ' . s:getbg('SyntasticWarningLine')
au VimEnter,ColorScheme * exec 'hi! SyntasticError ' . s:getbg('SyntasticErrorLine')
au VimEnter,ColorScheme * exec 'hi! SyntasticWarning ' . s:getbg('SyntasticWarningLine')

let g:syntastic_mode_map = { "mode": "active", "passive_filetypes": ["go", "html"] }

" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu            " completion with menu
" The "longest" option makes completion insert the longest prefix of all
" the possible matches; see :h completeopt
set completeopt=menu,menuone,longest
set switchbuf=useopen,usetab

" YouCompleteMe Setup
"set completeopt-=preview
let g:ycm_auto_trigger = 1
"let g:ycm_key_invoke_completion = ''

let g:ycm_confirm_extra_conf = 0
"let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_min_num_identifier_candidate_chars = 4
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']
"let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'

nnoremap <leader>h :YcmCompleter GoToDeclaration<cr>
nnoremap <leader>? :YcmCompleter GoToDefinitionElseDeclaration<cr>
nnoremap <leader>d :YcmCompleter GoToDefinition<cr>
nnoremap <leader>i :YcmCompleter FixIt<cr>

" ListToggle Setup
"let g:lt_height = 10

" UltiSnips
let g:UltiSnipsExpandTrigger ="<c-a>"
let g:UltiSnipsListSnippets = "<c-m-s>"
let g:UltiSnipsJumpForwardTrigger = "<right>"
let g:UltiSnipsJumpBackwardTrigger = "<left>"

" RainbowParantheses
let g:rainbow_active = 1

" CtrlP Setup
let g:ctrlp_working_path_mode = 0
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
nnoremap <silent> <leader>b :CtrlPBuffer<cr>
nnoremap <silent> <leader>. :CtrlPTag<cr>

" ClangFormat Setup
let g:clang_format#style_options = {
            \ "AccessModifierOffset": -4,
            \ "AllowShortLoopsOnASingleLine": "false",
            \ "AllowShortBlocksOnASingleLine" : "false",
            \ "AllowShortIfStatementsOnASingleLine": "false",
            \ "AlwaysBreakTemplateDeclarations": "false",
            \ "DerivePointerBinding": "false",
            \ "PointerBindsToType": "false",
            \ "ColumnLimit": 80,
            \ "TabWidth": 4,
            \ "Standard": "C++11" }
au FileType c,cpp,objc,objcpp noremap  <silent> <buffer> <leader>= :ClangFormat<cr>

" lengthmatters Setup
let g:lengthmatters_on_by_default = 0
call lengthmatters#highlight_link_to('Visual')
au FileType c,cpp :LengthmattersEnable

" Indent Guides Setup
let g:indent_guides_enable_on_vim_startup = 0

" better-whitespace Setup
let g:better_whitespace_filetypes_blacklist = ['vimfiler']

" TagBar Setup
nnoremap <leader>t :TagbarToggle<cr>

" Taglist
"let Tlist_Use_Right_Window = 1

" Look for tag def in a "tags" file in the dir of the current file, then for
" that same file in every folder above the folder of the current file, until the
" root.
set tags=./tags;/

" NERDTree Setup
" Open NERDTree
map <leader>n :NERDTreeToggle<CR>
" Close Vim if NERDTree is the only window left
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Grahical Undo setup
nnoremap <F5> :GundoToggle<CR>

" CScope plugin
source $HOME/.vim/plugin/cscope_maps.vim

" F3 functions calling this function
nmap <F3> :cs find c <C-R>=expand("<cword>")<CR><CR>	
" F4 functions called by this function
nmap <F4> :cs find d <C-R>=expand("<cword>")<CR><CR>	
